#!/bin/bash -e

BIN_DIR=/var/vcap/packages/gemfireserver/vFabric_GemFire_701_b40235/bin
LIB_DIR=/var/vcap/packages/gemfireserver/vFabric_GemFire_701_b40235/lib
RUN_DIR=/var/vcap/sys/run/gemfireserver
LOG_DIR=/var/vcap/sys/log/gemfireserver
PIDFILE=$RUN_DIR/gemfirelocator.pid
STDOUTLOG=$LOG_DIR/gemfirelocator.stdout.log
STDERRLOG=$LOG_DIR/gemfirelocator.stderr.log
LOCATORNAME=locatorsingleton<%= spec.index %>
LOCATORIPADDR=<%= spec.networks.send(properties.networks.cluster).ip %>

export JAVA_HOME=/var/vcap/packages/gemfire_jvm7
export PATH=$PATH:$JAVA_HOME/bin:$BIN_DIR

# erb template code takes the list of addresses for locators from the deployment properties, finds the entry with the IP address of this node and extracts the port number from within the square brakets
# Once deployed, the PORT will simply be set to that port number  
PORT=<%= myaddresspatternstr = spec.networks.send(properties.networks.cluster).ip.gsub('.', '\.') + "\\\[\\\d*\\\]"
         myaddresspattern = Regexp.new myaddresspatternstr
         mylocstr = myaddresspattern.match(properties.gemfire.locator.addresses)[0]
         /\d+/.match(/\[\d*\]/.match(mylocstr)[0])[0] %>

LOCATORS=<%= properties.gemfire.locator.addresses.gsub(' ','') %>

source /var/vcap/packages/common/utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "gemfire"

    mkdir -p $RUN_DIR
    mkdir -p $LOG_DIR

    cd $LOG_DIR

    # (re)move any existing directory that might contain stale state - only support adding an fresh node to the cluster
    if ls $LOCATORNAME &> /dev/null
    then
      if [ <%= properties.gemfire.locator.archivewd %> == true ]
      then
        if ls "$LOCATORNAME"_* &> /dev/null
        then
          cur=$(ls -d "$LOCATORNAME"_* | sed s/"$LOCATORNAME"_// | sort -g | tail -1)
        else
          cur=0
        fi
        next=$(($cur + 1))
        mv  $LOCATORNAME "$LOCATORNAME"_$next
      else
        rm -rf $LOG_DIR/$LOCATORNAME
      fi
    fi

    gfsh start locator --name=$LOCATORNAME --force=true --mcast-port=0 --J=-Dgemfire.bind-address=$LOCATORIPADDR --locators=$LOCATORS --port=$PORT --connect=false | grep "Process ID" | sed s/Process\ ID:\ // > $PIDFILE
    ;;

  stop)
    # first try a graceful shutdown
    gfsh -e "connect --locator=$LOCATORIPADDR[$PORT]" -e "stop locator --name=$LOCATORNAME"
    # and if that doesn't work, kill the process
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: gemfirelocator_ctl {start|stop}"

    ;;

esac
